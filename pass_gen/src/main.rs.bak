use structopt::StructOpt;
use rand::{thread_rng, Rng};
use rand::distributions::Alphanumeric;


#[derive(Debug, StructOpt)]
#[structopt(name = "sl0w pass-gen", about = "A dumb password generator for learning Rust.")]



struct Opt {
    #[structopt(short = "l", long = "length")]
    length:u8,

    #[structopt(short = "c", long = "complexity")]
    complexity:u8
}




enum Password {
    Low(u8),
    Medium(u8),
    High(u8),
}


// Special characters : 33 - 47; 58 - 64; 91 - 95; 123 - 126
// Letters : 65 - 90; 97 - 122
// Numbers : 48 - 57


fn generate(siz: u8){

    let mut rng = rand::thread_rng();
    let n1: u8 = rng.gen();
    
    for i in 1..siz {
        let n1: u8 = rng.genj
        println!("test {i}");
    }

}


fn main() {
    println!("Hello, world!");


    let mut rng = rand::thread_rng();
    let y: f64 = rng.gen();

    let n1: u8 = rng.gen();


    let test = char::from(45);

    println!("{test}");



}
